package: golang-go
Go has interfaces, but types are not inherited.
Go in compiled and statically typed.
The go tool can run a file without precompiling.
Compiled executables are OS specific.
Applications have a statically lined runtime.
No external virtual machine is needed.

Go has some object-oriented features:
  - you can define custom interfaces
  - custom types can implement one or more interfaces
  - custom types can have member methods
  - custom structs (data structures) can have member fields.

What Go doesn't support:
  - type inheritance (no subclasses)
  - method or operator overloading
  - structured exception handling
  - implicit numeric conversions

Go was designed as a next-gen languago for C.
Go borrows some syntax from C.
Go tries to reduce the amount of typing.

Go is case-sensitive.
Variable and package names are lower and mixed case.
Exported functions and fields have initial upper-case character.
Line feed ends a statement, no semicolons needed.
Lexer adds the semicolons as needed (when statement is completed and linefeed exists).

Code blocks are wrapped with braces {}, start brace on the same line as the statement.
Parenthesis aren't always used like in Java for example.
Go has a set of built-in functions that are always available without importing.
These are available via builtins, like len(string), panic(error) and recover().

Golang.org has documentation, playground and downloads.
To run go playground from localhost (first install golang-go.tools):
godoc -http=:6860 -play -index
It still uses go backend server to run it, not your localhost, so Internet access is needed. 
Limitation of playground: can't host web applications and can't access other hosts. It also fakes the filesystem, so the changes are temporary and can't do everything. The date and time are always the same (nov 10, 2009, 11pm) - when Go was first announced.
You can run only one Go source file at a time in playground, so can't create code libraries or packages.

The main file always starts with package main.

Go mandatory workspace subdirectories:
 - src (ource)
 - bin (binaries)
 - pkg (package objects)
$GOPATH sets the environment. 
The package directory is under src. For example scr/palindrome would crete a package named palindrome.
Package names should be all lowercase and a single word.
https://blog.golang.org/package_names
set GOOS="darwin" would create a mac package on a different platform than mac.
Every variable that is declared, must be used.
fmt.Printf does not add the linefeed automatically, whereas Println does.
fmt.Scanln automatically breaks up input with space characters.
strings.TrimSpace(str) to trim the linefeed from input.
strconv.ParseFloat(str, 64) to convert a string to a float.

Go is a statically typed language. All variables have assigned types. 
You can set types either explicitly or implicitly.
To set a type explicitly: use keyword var and = assignment operator.
Setting initial value is optional. 
var anInteger int = 42
var aString string = "This is Go!"
Implicit declaration with := :
anInteger := 42
aString := "This is Go!"

You can use constants in Go, explicitly or implicitly.
Explicit: const anInteger int = 42 (no colon)
Implicit: const aString = "This is Go!"

Predeclared Boolean and String types (all lowercase and single word):
bool
string

Fixed integer types: 
uint8 uint16 uint32 uint64
int8 int16 int32 int64

Aliases:
byte
uint
int
uintptr

Floating values:
float32
float64

Complex numbers:
complex64
complex128

Data collections:
Arrays
Slices
Maps
Structs

Language organization:
Functions
Interfaces
Channels

Data management:
Pointers

Arithmetic Operators:
Go supports all math operators used in C:
+ sum
- difference
* product
/ quotient
% remainder
& bitwise AND
| bitwise OR
^ bitwise XOR
&^ bit clear
<< left shift
>> right shift
Numeric types don't implicitly convert.
Example: you can't add an int to a float. Convert types before using.

Date and time are managed by the time package.
t := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
fmt.Printf("Go launched at %s\n", t) 

